<?php
/*
* Dependencies generated by the foreign keys
*/

require_model("agente.php");
require_model("cajas_general.php");


/* Primary key found: cajamov_id*/
class cajas_general_mov extends fs_model
{
    var $cajamov_id;
    var $caja_id;
    var $codagente;
    var $f_apunte;
    var $apunte;
    var $concepto;
    var $subtotal;
    var $ip;

    /**
    * @var agente agente
    */
    var $agente;

    /**
    * @var cajas_general cajas_general
    */
    var $cajas_general;

    public function __construct($data=FALSE)
    {
        $pluginname = str_replace(realpath(".") . "/", "",  realpath(__DIR__ . "/..") ) . "/";
        parent::__construct('cajas_general_mov', $pluginname);
        
        if($data)
        {
            $this->cajamov_id = $this->intval($data['cajamov_id']);
            $this->caja_id = $this->intval($data['caja_id']);
            $this->codagente = $data['codagente'];
            $this->f_apunte = Date('d-m-Y H:i:s', strtotime($data['f_apunte']));
            $this->apunte = floatval($data['apunte']);
            $this->concepto = $data['concepto'];
            $this->subtotal = floatval($data['subtotal']);
            $this->ip = $data['ip'];

            $this->agente = $this->agente->get($data['codagente']);

            $this->cajas_general = $this->cajas_general->get($data['caja_id']);
        }
    }

    /**
     * Esta funci贸n es llamada al crear una tabla.
     * Permite insertar valores en la tabla.
     */
    protected function install()
    {
        return '';
    }

    /**
     * Esta funci贸n devuelve TRUE si los datos del objeto se encuentran
     * en la base de datos.
     */
    public function exists()
    {
        
        if($this->cajamov_id)
        {
            $value = $this->var2str($this->cajamov_id);
            return $this->db->select("SELECT * FROM {$this->table_name} WHERE cajamov_id = $value");
        }
        
        return false;
    }

    /**
     * Esta funci贸n sirve tanto para insertar como para actualizar
     * los datos del objeto en la base de datos.
     */
    public function save()
    {
        $sql = "";
        if($this->exists())
        {
            $value = $this->var2str($this->cajamov_id);
            if($this->cajamov_id)
            {
                $sql = "UPDATE {$this->table_name} SET cajamov_id = " . $this->var2str($this->cajamov_id) . "
                        , caja_id = " . $this->var2str($this->caja_id) . "
                        , codagente = " . $this->var2str($this->codagente) . "
                        , f_apunte = " . $this->var2str($this->f_apunte) . "
                        , apunte = " . $this->var2str($this->apunte) . "
                        , concepto = " . $this->var2str($this->concepto) . "
                        , subtotal = " . $this->var2str($this->subtotal) . "
                        , ip = " . $this->var2str($this->ip) . "
                          WHERE cajamov_id = $value";
                return $this->db->exec($sql);
            }
            
        }
        else
        {
            $sql = "INSERT INTO {$this->table_name} (
                                    cajamov_id
                                    , caja_id
                                    , codagente
                                    , f_apunte
                                    , apunte
                                    , concepto
                                    , subtotal
                                    , ip
                                    
                                ) VALUES (
                                     " . $this->var2str($this->cajamov_id) . "
                                    ,  " . $this->var2str($this->caja_id) . "
                                    ,  " . $this->var2str($this->codagente) . "
                                    ,  " . $this->var2str($this->f_apunte) . "
                                    ,  " . $this->var2str($this->apunte) . "
                                    ,  " . $this->var2str($this->concepto) . "
                                    ,  " . $this->var2str($this->subtotal) . "
                                    ,  " . $this->var2str($this->ip) . "
                                    
                                )";
            return $this->db->exec($sql);
        }

        return false;
    }

    /**
     * Esta funci贸n sirve para eliminar los datos del objeto de la base de datos
     */
    public function delete()
    {
        
        $value = $this->var2str($this->cajamov_id);
        if($this->cajamov_id)
        {
            $sql = "DELETE FROM {$this->table_name} WHERE cajamov_id = $value)";
            return $this->db->exec($sql);
        }
        
    }
    
    public function get($cod)
    {
        $cod = $this->var2str($cod);
        return $this->parse($this->db->select("SELECT * FROM {$this->table_name} WHERE cajamov_id = $cod"));
    }
    
    public function get_all_offset($offset=0, $limit=FS_ITEM_LIMIT)
    {
        return $this->parse($this->db->select_limit("SELECT * FROM {$this->table_name} ORDER BY cajamov_id DESC", $limit, $offset), true);
    }
    public function get_all()
    {
        return $this->parse($this->db->select("SELECT * FROM {$this->table_name} ORDER BY cajamov_id DESC"), true);
    }
    public function parse($items, $array = false)
    {
        if(count($items) > 1 || $array)
        {
            $list = array();
            foreach($items as $item)
            {
                $list[] = new cajas_general_mov($item);
            }
            return $list;
        }
        else if(count($items) == 1)
        {
            return new cajas_general_mov($items[0]);
        }
        return null;
    }

}
